!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
<C-s>	plugs.vim	/^nmap <silent> <C-s> <Plug>(coc-range-select)$/;"	m
<S-TAB>	plugs.vim	/^inoremap <expr><S-TAB> pumvisible() ? "\\<C-p>" : "\\<C-h>"$/;"	m
<TAB>	plugs.vim	/^inoremap <silent><expr> <TAB>$/;"	m
<Tab>	plugs.vim	/^inoremap <silent><expr> <Tab>$/;"	m
<c-@>	plugs.vim	/^  inoremap <silent><expr> <c-@> coc#refresh()$/;"	m
<c-space>	plugs.vim	/^  inoremap <silent><expr> <c-space> coc#refresh()$/;"	m
<cr>	plugs.vim	/^inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()$/;"	m
<leader>a	plugs.vim	/^nmap <leader>a  <Plug>(coc-codeaction-selected)$/;"	m
<leader>ac	plugs.vim	/^nmap <leader>ac  <Plug>(coc-codeaction)$/;"	m
<leader>f	plugs.vim	/^nmap <leader>f  <Plug>(coc-format-selected)$/;"	m
<leader>qf	plugs.vim	/^nmap <leader>qf  <Plug>(coc-fix-current)$/;"	m
<leader>rn	plugs.vim	/^nmap <leader>rn <Plug>(coc-rename)$/;"	m
<nowait>	hkeys.vim	/^nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>$/;"	m
<nowait>	hkeys.vim	/^nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>$/;"	m
<nowait>	hkeys.vim	/^nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>$/;"	m
<nowait>	hkeys.vim	/^nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>$/;"	m
<nowait>	hkeys.vim	/^nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>$/;"	m
<nowait>	hkeys.vim	/^nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>$/;"	m
<nowait>	hkeys.vim	/^nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>$/;"	m
<nowait>	hkeys.vim	/^nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>$/;"	m
<nowait><expr>	plugs.vim	/^  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\\<c-r>=coc#float#scroll(0)\\<cr>" : "\\<Left>"$/;"	m
<nowait><expr>	plugs.vim	/^  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\\<c-r>=coc#float#scroll(1)\\<cr>" : "\\<Right>"$/;"	m
<nowait><expr>	plugs.vim	/^  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\\<C-b>"$/;"	m
<nowait><expr>	plugs.vim	/^  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\\<C-f>"$/;"	m
<nowait><expr>	plugs.vim	/^  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\\<C-b>"$/;"	m
<nowait><expr>	plugs.vim	/^  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\\<C-f>"$/;"	m
Fold	plugs.vim	/^command! -nargs=? Fold :call     CocAction('fold', <f-args>)$/;"	c
Format	plugs.vim	/^command! -nargs=0 Format :call CocAction('format')$/;"	c
K	hkeys.vim	/^nnoremap <silent> K :call <SID>show_documentation()<CR>$/;"	m
OR	plugs.vim	/^command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')$/;"	c
[g	plugs.vim	/^nmap <silent> [g <Plug>(coc-diagnostic-prev)$/;"	m
]g	plugs.vim	/^nmap <silent> ]g <Plug>(coc-diagnostic-next)$/;"	m
ac	plugs.vim	/^omap ac <Plug>(coc-classobj-a)$/;"	m
af	plugs.vim	/^omap af <Plug>(coc-funcobj-a)$/;"	m
check_back_space	plugs.vim	/^function! s:check_back_space() abort$/;"	f
g:coc_global_extensions	plugs.vim	/^let g:coc_global_extensions = ['coc-json', 'coc-snippets', 'coc-explorer', 'coc-emmet', 'coc-htmlhint', 'coc-css', 'coc-tsserver', 'coc-git']$/;"	v
g:ctrlp_map	hkeys.vim	/^let g:ctrlp_map = '<leader>p'$/;"	v
g:gutentags_cache_dir	plugs.vim	/^let g:gutentags_cache_dir = expand('~\/.cache\/vim\/ctags\/')$/;"	v
g:gutentags_ctags_exclude	plugs.vim	/^let g:gutentags_ctags_exclude = [$/;"	v
gd	hkeys.vim	/^nmap <silent> gd <Plug>(coc-definition)$/;"	m
gi	hkeys.vim	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	m
gr	hkeys.vim	/^nmap <silent> gr <Plug>(coc-references)$/;"	m
gy	hkeys.vim	/^nmap <silent> gy <Plug>(coc-type-definition)$/;"	m
ic	plugs.vim	/^omap ic <Plug>(coc-classobj-i)$/;"	m
if	plugs.vim	/^omap if <Plug>(coc-funcobj-i)$/;"	m
mapleader	hkeys.vim	/^let mapleader=";"$/;"	v
mygroup	plugs.vim	/^augroup mygroup$/;"	a
show_documentation	plugs.vim	/^function! s:show_documentation()$/;"	f
